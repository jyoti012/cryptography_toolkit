package CS616Toolkit;

import javax.crypto.Cipher;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.security.KeyPair;

public class AES_File_EncryptedClue {
	public static void main(String[] args) {
		try {
			byte[] cipherTextArr = new byte[] {
					(byte) 0x7b, (byte) 0xb1, (byte) 0xe0, (byte) 0x8f, (byte) 0x7e, (byte) 0xc0, (byte) 0x12, (byte) 0x7b,
					(byte) 0xc0, (byte) 0x7d, (byte) 0x8c,
					(byte) 0x55, (byte) 0xed, (byte) 0x96, (byte) 0x40, (byte) 0x0f, (byte) 0x92, (byte) 0x8a, (byte) 0x5a,
					(byte) 0xe4, (byte) 0xf1, (byte) 0x1d,
					(byte) 0x51, (byte) 0xe2, (byte) 0x40, (byte) 0x74, (byte) 0x84, (byte) 0x67, (byte) 0x52, (byte) 0xbd,
					(byte) 0x7d, (byte) 0xe8, (byte) 0x02,
					(byte) 0x9b, (byte) 0x8e, (byte) 0xf4, (byte) 0xac, (byte) 0x5a, (byte) 0xe1, (byte) 0xbc, (byte) 0xd9,
					(byte) 0x62, (byte) 0x63, (byte) 0xb9,
					(byte) 0x3b, (byte) 0xc5, (byte) 0x72, (byte) 0x86, (byte) 0x4c, (byte) 0x57, (byte) 0xa0, (byte) 0xf1,
					(byte) 0x50, (byte) 0x7b, (byte) 0x64,
					(byte) 0x76, (byte) 0xf4, (byte) 0xcf, (byte) 0xa2, (byte) 0xc6, (byte) 0x1d, (byte) 0x38, (byte) 0x11,
					(byte) 0x98, (byte) 0xcd, (byte) 0xe2,
					(byte) 0xa2, (byte) 0x8e, (byte) 0xd3, (byte) 0xc3, (byte) 0x63, (byte) 0x2a, (byte) 0xa7, (byte) 0x28,
					(byte) 0xe9, (byte) 0xe1, (byte) 0xf4,
					(byte) 0xc0, (byte) 0x30, (byte) 0x0e, (byte) 0xf3, (byte) 0xab, (byte) 0xf6, (byte) 0xb6, (byte) 0x12,
					(byte) 0x6a, (byte) 0xeb, (byte) 0x46,
					(byte) 0x85, (byte) 0x6a, (byte) 0x73, (byte) 0x0e, (byte) 0x79, (byte) 0x22, (byte) 0x5d, (byte) 0x26,
					(byte) 0x5a, (byte) 0x64, (byte) 0x51,
					(byte) 0xd1, (byte) 0x1e, (byte) 0x46, (byte) 0xce, (byte) 0xbf, (byte) 0x3a, (byte) 0x5e, (byte) 0xab,
					(byte) 0x9a, (byte) 0x42, (byte) 0x38,
					(byte) 0x49, (byte) 0x14, (byte) 0xed, (byte) 0xec, (byte) 0x10, (byte) 0x17, (byte) 0xc1, (byte) 0xa6,
					(byte) 0x04, (byte) 0x71, (byte) 0xb3,
					(byte) 0x15, (byte) 0xd9, (byte) 0xa1, (byte) 0x77, (byte) 0x2a, (byte) 0x7d, (byte) 0x5a, (byte) 0xd5,
					(byte) 0x65, (byte) 0x1e, (byte) 0xd6,
					(byte) 0xdc, (byte) 0x0b, (byte) 0x52, (byte) 0xed, (byte) 0x8d, (byte) 0xb3, (byte) 0x16, (byte) 0xaa,
					(byte) 0xe9, (byte) 0xbb, (byte) 0xbe,
					(byte) 0x15, (byte) 0x05, (byte) 0x50, (byte) 0x30, (byte) 0xe3, (byte) 0x8f, (byte) 0x96, (byte) 0xa5,
					(byte) 0x42, (byte) 0x45, (byte) 0xdf,
					(byte) 0x32, (byte) 0x12, (byte) 0x7e, (byte) 0x78, (byte) 0x50, (byte) 0xa4, (byte) 0x42, (byte) 0xb5,
					(byte) 0x8c, (byte) 0x8f, (byte) 0xab,
					(byte) 0x15, (byte) 0x4d, (byte) 0x51, (byte) 0x32, (byte) 0x5b, (byte) 0xe3, (byte) 0x17, (byte) 0x3b,
					(byte) 0x84, (byte) 0x6b, (byte) 0x0d,
					(byte) 0x16, (byte) 0xf0, (byte) 0xe1, (byte) 0x19, (byte) 0x1e, (byte) 0xf9, (byte) 0x46, (byte) 0xb5,
					(byte) 0x55, (byte) 0x72, (byte) 0x70,
					(byte) 0xe9, (byte) 0x6e, (byte) 0x4a, (byte) 0x6c, (byte) 0x63, (byte) 0x4b, (byte) 0x62, (byte) 0xb5,
					(byte) 0xc5, (byte) 0x33, (byte) 0xf7,
					(byte) 0xef, (byte) 0x84, (byte) 0xa2, (byte) 0xb1, (byte) 0x70, (byte) 0xcb, (byte) 0xb5, (byte) 0xbd,
					(byte) 0x1e, (byte) 0x05, (byte) 0x9c,
					(byte) 0xa4, (byte) 0x9a, (byte) 0x41, (byte) 0xbb, (byte) 0x45, (byte) 0xdf, (byte) 0x8a, (byte) 0x5b,
					(byte) 0xdd, (byte) 0x37, (byte) 0x92,
					(byte) 0xaf, (byte) 0xc8, (byte) 0xfe, (byte) 0xe7, (byte) 0xe2, (byte) 0x4d, (byte) 0xe5, (byte) 0xef,
					(byte) 0x12, (byte) 0xca, (byte) 0x64,
					(byte) 0xf2, (byte) 0x77, (byte) 0xff, (byte) 0xf2, (byte) 0x5f, (byte) 0x9e, (byte) 0xf1, (byte) 0x9f,
					(byte) 0x5b, (byte) 0x4e, (byte) 0x37,
					(byte) 0xee, (byte) 0x7e, (byte) 0xa1, (byte) 0xbd, (byte) 0x9d, (byte) 0x9e, (byte) 0x12, (byte) 0xb6,
					(byte) 0x92, (byte) 0xbc, (byte) 0xa1,
					(byte) 0x00, (byte) 0x04, (byte) 0x08
			};
			FileInputStream fileInputStream = new FileInputStream(
					"Crypto_Code/DefaultRSA_key.ser");
			ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
			Object secretKeyObj = objectInputStream.readObject();

			Cipher cipher = Cipher.getInstance("RSA");
			// Initializing the Cipher Text object
			cipher.init(Cipher.DECRYPT_MODE, ((KeyPair) secretKeyObj).getPrivate());
			// Decoding Cipher Text to get the SharedKey
			byte[] sharedKey = cipher.doFinal(cipherTextArr);
			System.out.println("Shared Key: " + Utils.byteArrayToHex(sharedKey));
			objectInputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
